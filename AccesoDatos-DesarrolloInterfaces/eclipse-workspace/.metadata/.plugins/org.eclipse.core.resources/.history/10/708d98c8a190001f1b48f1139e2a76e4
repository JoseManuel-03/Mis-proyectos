package Ejercicio4.Services;

import java.sql.Connection;

import java.sql.SQLException;

import org.apache.commons.codec.digest.DigestUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import Ejercicio4.Dao.Conexion;
import Ejercicio4.Dao.DaoUser;
import Ejercicio4.Interfez.Interface;
import Ejercicio4.modelo.Usuario;

public class UserService extends Conexion implements Interface {

	private static final Logger log = LoggerFactory.getLogger(PedidosService.class);
	private DaoUser daoUser;

	@Override
	public void changePass(Long idUser, String password, String newPassword) throws ErrorCambiandoPasswordException {
		try (Connection conn = abrirConexion()) {
			log.debug("Cambiando la contrase単a");
			Usuario user = daoUser.getById(conn, idUser);
			String passwordCifrada = DigestUtils.sha256Hex(password);
			if (user.getPassword().equals(passwordCifrada)) {
				throw new ErrorCambiandoPasswordException("Error al intentar cambiar la contrase単a");
			}
			newPassword = DigestUtils.sha256Hex(password);
			user.setPassword(newPassword);
			daoUser.updateUser(conn, user);

		} catch (SQLException e) {
			log.error("Error cambiando contrase単a", e);
			throw new ErrorCambiandoPasswordException("Error al intentar cambiar la contrase単a", e);
		}

	}

	@Override
	public Usuario registrer(Usuario user) throws HayUsuariosException {
		try (Connection conn = abrirConexion()) {
			log.debug("Insertando usuario nuevo");

			// daoUser.getByUser(conn, null);
			// daoUser.getByEmail(conn, null);

			Long id = daoUser.insertUser(conn, user);
			user.setIdUser(id);

		} catch (SQLException e) {
			log.error("Error registrando usuario", e);
			throw new HayUsuariosException("Ya hay un usuario igual registrado", e);
		}
		return user;

	}

	@Override
	public Usuario login(String login, String password) throws NoHayUsuariosException {
		try (Connection conn = abrirConexion()) {
			log.debug("Logeando usuario");
			Usua
			if (daoUser.getByUser(conn, login) == null) {

			} else if (daoUser.getByEmail(conn, login) == null) {

			} else {
				log.error("Error registrando pedido");
			}

			return null;

		} catch (SQLException e) {
			log.error("Error Logeando usuario", e);
			throw new NoHayUsuariosException("Ya hay un usuario igual registrado", e);
		}

	}

	@Override
	public Usuario consult(Long idUser) throws NoHayUsuariosException {
		try (Connection conn = abrirConexion()) {
			log.debug("Logeando usuario");

			Usuario user = daoUser.getById(conn, idUser);
			return user;
		} catch (SQLException e) {
			log.error("Error registrando pedido", e);
			throw new NoHayUsuariosException("Ya hay un usuario igual registrado", e);
		}

	}

}
