package ceu.dam.javafx.examen.gui.controller;

import java.util.List;
import java.util.Observable;

import ceu.dam.javafx.examen.model.Coche;
import ceu.dam.javafx.examen.service.ExamenService;
import ceu.dam.javafx.examen.service.NotFoundException;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ColorPicker;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;

public class IdentificacionController extends AppController {

	private ExamenService service;
	private Coche coche;

	@FXML
	private Button botonConsultar;

	@FXML
	private ColorPicker colorPicker;

	@FXML
	private ComboBox<String> comboBox;

	@FXML
	private TextField textfield;


	@FXML
	private void initialize() {
		coche = new Coche();
		service = new ExamenService();

		List<String> lista = service.consultarMarcas();

		for (String string : lista) {
			comboBox.getItems().add(string);

		}
	

		coche = new Coche();
		addParam(PARAM_MATRICULA, coche.getMatricula());

	}

	@FXML
	void presionarConsultar(ActionEvent event) throws NotFoundException {
		if (textfield.getText().isEmpty()) {
			mostrarError("Es obligatorio indicar una matr√≠cula");
		}
		if (comboBox.getItems().equals("MARCA")) {
			mostrarError("Es obligatorio indicar una marca");
		}

		consultar(textfield.getText());
	}

	public void consultar(String texto) throws NotFoundException {
		Coche coche = (Coche) getParam(PARAM_MATRICULA);
		textfield.setText(texto);
		service = new ExamenService();

		Task<Coche> task = new Task<Coche>() {

			@Override
			protected Coche call() throws Exception {
				return service.identificarCoche("1", comboBox.getSelectionModel().getSelectedItem(),
						colorPicker.getValue());
			}

			@Override
			protected void succeeded() {
				Coche resultado = getValue();
				if (resultado.getMatricula().equals("1")) {
					changeScene(FXML_INICIO);
				}
			}

			@Override
			protected void failed() {
				mostrarError(new NotFoundException().getMessage());
			}

		};

		new Thread(task).start();

	}

}
